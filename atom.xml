<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>同理，显然，略……</title>
  
  <subtitle>还没想好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://momingcoder.github.io/"/>
  <updated>2017-11-20T07:29:50.142Z</updated>
  <id>https://momingcoder.github.io/</id>
  
  <author>
    <name>Moming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask 规范化</title>
    <link href="https://momingcoder.github.io/2017/11/19/Flask-%E8%A7%84%E8%8C%83%E5%8C%96/"/>
    <id>https://momingcoder.github.io/2017/11/19/Flask-规范化/</id>
    <published>2017-11-19T15:27:47.000Z</published>
    <updated>2017-11-20T07:29:50.142Z</updated>
    
    <content type="html"><![CDATA[<p>说到 <code>Flask</code> ，这是我接触的第一个后端架构，也基本是目前唯一一个比较熟悉的。</p><p>对于规范化，这当然是很有必要的，特别是你的项目越做越复杂，不断增加新功能的时候，就会发现如果一开始结构很差，基本就需要大规模重构了。而重构，又通常是说说而已，真正动手完全重构什么的是不存在的，这么丑的代码，就算是我自己写得，我也不想再看了。</p><p>所以呢，一开始就尽可能做得规范一点，这样以后看起来就很舒服了，进行修改也会变得相对简单，别人要接手也不会看吐了。</p><h3 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h3><p>大概长这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── docker-compose.yml</div><div class="line">├── Dockerfile</div><div class="line">├── docs</div><div class="line">├── main.py</div><div class="line">├── README.md</div><div class="line">├── requirements.txt</div><div class="line">├── run.sh</div><div class="line">├── app_name</div><div class="line">│   ├── config.py</div><div class="line">│   ├── data</div><div class="line">│   ├── __init__.py</div><div class="line">│   ├── static</div><div class="line">│   │   ├── css</div><div class="line">│   │   ├── fonts</div><div class="line">│   │   ├── img</div><div class="line">│   │   └── js</div><div class="line">│   ├── templates</div><div class="line">│   │   ├── index.html</div><div class="line">│   │   ├── layout.html</div><div class="line">│   │   ├── blueprint_1</div><div class="line">│   │   └── blueprint_n</div><div class="line">│   └── blueprints</div><div class="line">│       ├── __init__.py</div><div class="line">│       ├── blueprint_1.py</div><div class="line">│       └── blueprint_n.py</div><div class="line">└── tests</div></pre></td></tr></table></figure><p>先说根目录，一般都用 Docker 的，这里就需要两个配置文件 <code>Dockerfile</code> 和 <code>docker-compose.yml</code> 了；<code>README</code> 当然还是要写的；<code>requirements.txt</code> 里面写上项目用到的各种包；<code>main.py</code> 和 <code>run.sh</code> ，前者是项目的运行文件，后者是考虑如果使用 <code>gunicorn</code> 的话，写到文件里比较省事；<code>docs</code> 和 <code>tests</code> 目录也是需要有的，虽然不是每个人都写测试和文档；最后 <code>app_name</code> ，是整个项目的主体。</p><p>在 <code>app_name</code> 下，每个包含 Python 的文件都需要 <code>__init__.py</code> ，<code>config.py</code> 里面包含项目的各种配置，<code>static</code> ，<code>templates</code> 里面是前端的文件，<code>blueprints</code> 里面包含各个模块的 blueprint。</p><p>###用法</p><p>这里主要说明的是 Blueprint 在项目中的重要作用。</p><p>对于有一定规模的项目来说，通常会有很多不同用途的组件，比如用户登录相关的，API 相关的，某个重要功能相关的等等，这时候利用不同的 Blueprint 加以区分就能够简化整个项目结构，降低模块间的耦合，不管是对于协作开发还是增改功能都有很大益处。</p><p>针对不同的 Blueprint，HTML 文件最好也放置在 <code>template</code> 下不同的文件夹中。</p><p>在使用 Blueprint 的过程中，有几点需要特别注意：</p><ul><li><code>__init__.py</code> 文件并不是摆设，通常里面需要 import 该文件夹下相关的模块，也可以做一些初始化一类的操作，尤其是 <code>app_name</code> 文件夹下的，需要设置各种扩展，以及注册所需的 Blueprint</li><li>使用这种结构的时候，新手很容易发生 Circular import 问题，这个通常是自己没设计好。另外，推荐大家熟悉一下 Python import 的细节，了解一点底层的东西，就能很好解决这个问题了</li><li>推荐所有使用 css/js 的地方都用 <code>url_for</code> 来解决</li></ul><h3 id="常用扩展"><a class="markdownIt-Anchor" href="#常用扩展"></a> 常用扩展</h3><ul><li><code>flask_login</code> 用户登录，做一些权限限制等</li><li><code>flask_sqlalchemy</code> 数据库操作的 ORM</li><li><code>flask_wtf</code> 提供简单的 WTForms 集成，方便控制表单</li><li><code>flask_restful</code> 方便写 RESTful API</li></ul><p>其他的可以浏览 <a href="http://flask.pocoo.org/extensions/" target="_blank" rel="external">Flask Extensions Registry</a>  。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说到 &lt;code&gt;Flask&lt;/code&gt; ，这是我接触的第一个后端架构，也基本是目前唯一一个比较熟悉的。&lt;/p&gt;
&lt;p&gt;对于规范化，这当然是很有必要的，特别是你的项目越做越复杂，不断增加新功能的时候，就会发现如果一开始结构很差，基本就需要大规模重构了。而重构，又通常是说说
      
    
    </summary>
    
      <category term="技术， 笔记" scheme="https://momingcoder.github.io/categories/%E6%8A%80%E6%9C%AF%EF%BC%8C-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记, Flask" scheme="https://momingcoder.github.io/tags/%E7%AC%94%E8%AE%B0-Flask/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="https://momingcoder.github.io/2017/11/18/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://momingcoder.github.io/2017/11/18/Docker-常用命令/</id>
    <published>2017-11-18T12:55:39.000Z</published>
    <updated>2017-11-19T15:17:27.627Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 这几年非常火，只不过对于我这种基本不接触业务的人而言，平时很少会用到 Docker，自己写项目愿意用 Python 的 <code>virtualenv</code> 就不错了。</p><p>对于 Docker，个人了解很肤浅，这里不过是想记录一下自己偶尔需要用到的命令，方便自己使用而已。</p><hr><h3 id="docker"><a class="markdownIt-Anchor" href="#docker"></a> Docker</h3><p><code>Dockerfile</code> 基本配置如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> docker-images</div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></div><div class="line"><span class="bash">ADD . /app</span></div><div class="line"><span class="bash">RUN pip install -r requirements.txt</span></div><div class="line"><span class="bash">EXPOSE 5000</span></div><div class="line"><span class="bash">ENV NUM_WORKS 4</span></div><div class="line"><span class="bash">CMD [<span class="string">'python3'</span>, <span class="string">'main.py'</span>]</span></div></pre></td></tr></table></figure><p>通过 <code>Dockerfile</code> 来创建 Docker image：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t my-image</div></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 4000:80 my-image</div></pre></td></tr></table></figure><p>Docker 里面各种带 <code>:</code> 的，前面表示的是外部的，后面是镜像里面的。</p><p>停止：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker container stop container_id</div></pre></td></tr></table></figure><p>其他相关命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker container ls</div><div class="line">docker container rm</div><div class="line">docker image ls -a</div><div class="line">docker tag &lt;image&gt; username/repository:tag</div><div class="line">docker push username/repository:tag</div><div class="line">docker run username/repository:tag</div></pre></td></tr></table></figure><h3 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service</h3><p><code>docker-compose.yml</code> 基本配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">web:</span></div><div class="line"><span class="attr">image:</span> <span class="string">username/repository:tag</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">replicas:</span> <span class="number">5</span></div><div class="line"><span class="attr">resources:</span></div><div class="line"><span class="attr">limits:</span></div><div class="line"><span class="attr">cpus:</span> <span class="string">"0.1"</span></div><div class="line"><span class="attr">memory:</span> <span class="number">50</span><span class="string">M</span></div><div class="line"><span class="attr">restart_policy:</span></div><div class="line"><span class="attr">condition:</span> <span class="string">on-failure</span></div><div class="line"><span class="attr">ports:</span></div><div class="line"><span class="bullet">-</span> <span class="string">"80:80"</span></div><div class="line"><span class="attr">volumes:</span></div><div class="line"><span class="bullet">-</span> <span class="string">"/home/username/data:/data"</span></div><div class="line"><span class="attr">redis:</span></div><div class="line"><span class="attr">image:</span> <span class="string">redis</span></div><div class="line"><span class="attr">ports:</span></div><div class="line"><span class="bullet">-</span> <span class="string">"6379:6379"</span></div><div class="line"><span class="attr">volumes:</span></div><div class="line"><span class="bullet">-</span> <span class="string">"/home/docker/data:/data"</span></div><div class="line"><span class="attr">command:</span> <span class="string">redis-server</span> <span class="bullet">--appendonly</span> <span class="literal">yes</span></div></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker swarm init</div></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stack deploy -c docker-compose.yml your_app_name</div></pre></td></tr></table></figure><p>其他：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker service ls</div><div class="line">docker service ps your_app_name</div><div class="line">docker stack rm your_app_name</div><div class="line">docker swarm leave --force</div></pre></td></tr></table></figure><h3 id="compose"><a class="markdownIt-Anchor" href="#compose"></a> Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d --build</div><div class="line">docker-compose stop</div></pre></td></tr></table></figure><p>启动镜像，在镜像里面修改并提交：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name ubuntu_bash -i -t ubuntu-python35 /bin/bash</div><div class="line"><span class="comment"># do something in cmd</span></div><div class="line">docker commit container_id username/repository:tag</div></pre></td></tr></table></figure><p>还有 Swarm 管理和监控等，因为我平时也不用，所以就不写了。</p><p>我发现官方文档比以前好一点了，起码 Tutorial 写得能看了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker 这几年非常火，只不过对于我这种基本不接触业务的人而言，平时很少会用到 Docker，自己写项目愿意用 Python 的 &lt;code&gt;virtualenv&lt;/code&gt; 就不错了。&lt;/p&gt;
&lt;p&gt;对于 Docker，个人了解很肤浅，这里不过是想记录一下自己偶尔需
      
    
    </summary>
    
      <category term="技术" scheme="https://momingcoder.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="笔记" scheme="https://momingcoder.github.io/categories/%E6%8A%80%E6%9C%AF/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://momingcoder.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>折腾各种工具</title>
    <link href="https://momingcoder.github.io/2017/11/16/%E6%8A%98%E8%85%BE%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7/"/>
    <id>https://momingcoder.github.io/2017/11/16/折腾各种工具/</id>
    <published>2017-11-16T07:39:06.000Z</published>
    <updated>2017-11-16T09:16:50.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>俗话说的好，技术水平不重要，重要的是折腾各种工具的过程。: )</p><p>那么，就来总结一下自己觉得还不错的工具吧。</p><h3 id="chrome"><a class="markdownIt-Anchor" href="#chrome"></a> Chrome</h3><p>先从浏览器说起吧。虽然大家都不相信 “Don’t be eval”，但是目前看来还是 Chrome 比较好用。最近也有 Firefox 速度已经领先的说法，无所谓，暂时懒得换了。</p><ul><li><a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">JSON Viewer</a> 在浏览器中查看 JSON 格式，支持把返回的 utf-8 编码的字符串变成文本，有各种 theme</li><li><a href="https://chrome.google.com/webstore/detail/its-raining/fkakmejoechmicbecchienoapbakancc?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">It’s Raining</a> 雨声，适合工作的时候听。别跟我扯什么“适合工作的时候听的歌单”、“安静学习的音乐”，我只认白噪声，完全不挑耳机的，当然也可以用来煲耳机</li><li><a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Markdown Preview Plus</a> 在浏览器中查看 Markdown</li><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US" target="_blank" rel="external">Octotree</a> 显示 GitHub 仓库的目录</li><li><a href="https://chrome.google.com/webstore/detail/polarr-photo-editor/djonnbgfieijldcieafgjcnhmpcfpmgg?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Polarr Photo Editor</a> 泼辣修图，适合我这种业余人士修改图片格式，进行裁剪什么的（对，我完全不修图的</li><li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Postman</a> 测试 API 接口的，很方便</li><li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Vimium</a> Vim 快捷键，不用把手从键盘上移开就可以轻松浏览网页了，非常方便</li></ul><h3 id="跨平台应用"><a class="markdownIt-Anchor" href="#跨平台应用"></a> 跨平台应用</h3><p>当学生的时候主要还是 Windows，毕业了就用 Linux 了，暂时没用过 Mac。</p><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code</a> 非常好用的编辑器了，一开始关注 Electron 的时候，发现了 Atom，非常棒，后来有了这个就没用过其他的了，反正我开始使用各种语言写代码的时候，已经有这个了，所以一直没试过 Sublime Text。插件是一大特色，很多非常优秀的插件，主题等。各种语言相关的支持插件就不说了<ul><li>找了一下，我以为我应该装了很多的，发现不少优秀的东西都被集成了，比如一些常见的主题，minimap 等</li></ul></li><li><a href="https://www.mendeley.com/" target="_blank" rel="external">Mendeley</a> 论文管理和阅读。缺点是国内同步比较慢，优点是跨平台且免费，完全可以满足基本需求，看论文，做标注，记笔记，管理阅读过的文献</li><li><a href="https://typora.io/" target="_blank" rel="external">Typora</a> Markdown 写作，支持 LaTeX，所见即所得，很方便</li><li><a href="http://store.steampowered.com/" target="_blank" rel="external">Steam</a> 后悔自己毕业了才开始从这里买游戏</li></ul><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h3><p>用户最多的操作系统了，最近还是向着好的方向发展的，相对的，Mac 似乎最近口碑很差。</p><ul><li><a href="http://cmder.net/" target="_blank" rel="external">Cmder</a> 一款终端，免安装，可以使用很多常见的命令，现在做得很棒了，个人认为是 Windows 下最好用的终端</li><li><a href="https://www.microsoft.com/en-us/store/p/one-commander/9nblggh4s79b" target="_blank" rel="external">One Commander</a> 文件管理系统，以前用 Clover，广告很难受，就换了这个，启动略慢</li><li>没了。一般软件都先看看 UWP 版本的评价好不好，优先使用 UWP 版。</li></ul><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><p>穷人用这个就挺好的，一般直接 Ubuntu，想折腾就上 Arch，想装黑客可以上 Kali。</p><ul><li><a href="https://github.com/axel-download-accelerator/axel" target="_blank" rel="external">AXEL</a> 下载加速器，一般下载什么包的时候就用上了，可以用来下载百度云盘的东西，不会被限速 200 的</li><li><a href="https://github.com/sharkdp/fd" target="_blank" rel="external">fd</a> Rust 开发的本地文件搜索工具，非常强悍</li><li><a href="https://github.com/soimort/you-get" target="_blank" rel="external">you-get</a> 下载视频、图片的神器，抽空下载好就不用看烦人的广告了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;俗话说的好，技术水平不重要，重要的是折腾各种工具的过程。: )&lt;/p&gt;
&lt;p&gt;那么，就来总结一下自己觉得还不错的工具吧。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="技术" scheme="https://momingcoder.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="https://momingcoder.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>无聊写博客</title>
    <link href="https://momingcoder.github.io/2017/11/05/%E6%97%A0%E8%81%8A%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>https://momingcoder.github.io/2017/11/05/无聊写博客/</id>
    <published>2017-11-05T08:47:30.000Z</published>
    <updated>2017-11-16T06:19:43.527Z</updated>
    
    <content type="html"><![CDATA[<p>大概一年多没有写博客了。这一年间，多多少少接触了很多工业界的东西，不少东西还是值得记下的。更重要的是，很多东西不记下来自己就忘了，用的时候查资料也不一定方便，毕竟不是每个开源项目的文档都写得那么好用，也只有自己写出来的才最适合自己。</p><p>像很多人一样，开始写博客前都要花很多时间折腾一下。专门的博客服务，<code>WordPress</code>，<code>GitHub Page</code>，完全自己搭建等，基本上都试过了，到头来还是觉得静态页面完全可以满足需求了（是的，变成老实人了呢）。</p><p>另一方面，学习过程中写笔记是很好的习惯，只是一直没有一个合适的笔记应用，我希望是跨平台的，对 <code>Markdown</code> 支持良好，能添加 <code>LaTeX</code> 公式的，速度当然不能慢了。一个个筛选下来，没有一个能满足需求的。不过直接写到博客里面也没有什么不好的，虽说一般笔记是粗糙的知识，博客应该是自己提炼过的，但是想到反正也没人看，自己的博客还不是自己做主嘛，随便瞎写也没关系。</p><p>说到底，也不指望自己能写多少东西，写一点算一点吧，记录一下生活也好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大概一年多没有写博客了。这一年间，多多少少接触了很多工业界的东西，不少东西还是值得记下的。更重要的是，很多东西不记下来自己就忘了，用的时候查资料也不一定方便，毕竟不是每个开源项目的文档都写得那么好用，也只有自己写出来的才最适合自己。&lt;/p&gt;
&lt;p&gt;像很多人一样，开始写博客前
      
    
    </summary>
    
      <category term="生活" scheme="https://momingcoder.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="琐事" scheme="https://momingcoder.github.io/categories/%E7%94%9F%E6%B4%BB/%E7%90%90%E4%BA%8B/"/>
    
    
      <category term="琐事" scheme="https://momingcoder.github.io/tags/%E7%90%90%E4%BA%8B/"/>
    
  </entry>
  
</feed>
